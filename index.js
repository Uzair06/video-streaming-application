import express from "express"
import cors from "cors"
import multer from "multer"
import { v4 as uuidv4 } from "uuid"
import path from "path"
import fs from "fs"
import { exec } from "child_process" //watch out
import { error } from "console"
import { stderr, stdout } from "process"


const app= express() 

//multer middleware

const storage = multer.diskStorage({
    destination: function(req, file, cb){
        cb(null, "./uploads")
    },
    filename: function(req, file, cb){
        cb(null, file.fieldname +"-" + uuidv4() + path.extname(file.originalname))
    }
})

// req: The request object.
// file: The file object being uploaded.
// cb: The callback function, which takes two arguments: an error (if any) and the destination folder (in this case, ./uploads).

// b: The callback function, which takes two arguments: an error (if any) and the filename.
// The filename is constructed by concatenating the field name of the file (file.fieldname), a unique identifier generated by uuidv4(), and the original file extension (path.extname(file.originalname)).


//multer configuration
const upload = multer({storage: storage})

app.use(
    cors({
        origin: ["http://localhost:3000", "http://localhost:5173"],
        credentials: true
        })
)

app.use((req, res, next) => {
    res.header("Access-Control-Allow-Origin","*")
    res.header(
        "Access-Control-Allow-Headers",
        "Origin, X-Requested-With, Content-Type, Accept"
    );
    next()
})
app.use(express.json())
app.use(express.urlencoded({extended: true}))
app.use("/uploads",express.static("uploads"))

app.get('/', function(req,res){
    res.json({message: "hello"})
})

app.post("/upload" , upload.single('file') ,function(req,res){
    // console.log("file uploaded")
    // res.json({ message: "File uploaded successfully" })
    // upload.single('file'): This middleware handles single file uploads where the file's form field name is file.
    const lessonId = uuidv4()
    const videoPath = req.file.path
    const outputPath = `./uploads/courses/${lessonId }`
    const hlsPath = `${outputPath}/index.m3u8`//kind of a index keeping file
    console.log("hlsPath:", hlsPath)

    if(!fs.existsSync(outputPath)){
        fs.mkdirSync(outputPath, {recursive: true})
    }

    //ffmpeg
    const ffmpegCommand = `ffmpeg -i ${videoPath} -codec:v libx264 -codec:a aac -hls_time 10 -hls_playlist_type vod -hls_segment_filename "${outputPath}/segment%03d.ts" -start_number 0 ${hlsPath}`;


    //we're running this command on our machine because this is a proof of concept project usually it runs on third party servers
    //this conversion can take a hell of of time
    //no queue so not to be used in production
    exec(ffmpegCommand, (error, stdout ,stderr) => {
        if(error)//error: An error object if the ffmpeg command fails.
            {
                console.log(`exec error: ${error}`)//if an error occurs during the execution of the ffmpeg command, it logs the error message to the console.

            }
            console.log(`stdout: ${stdout}`)//stdout: The standard output of the command.
            console.log(`stderr:${stderr}`)//stderr: The standard error of the ffmpeg command.
            const videoURL = `http://localhost:8000/uploads/courses/${lessonId}/index.m3u8`
            //videoURL: Constructs the URL where the converted video can be accessed.
// This URL is typically based on the application's structure and where the HLS files are stored.
            res.json({
                message: "Video converted to HLS format",
                videoURL: videoURL,
                lessonId: lessonId 
            })
    })

})

app.listen(8000,function(){
    console.log("App is listening at port 8000");
})